name: Update Clash Subscription

on:
  workflow_dispatch:

  # 设置定时任务，使用 cron 语法
  # '0 */6 * * *' 表示每隔 6 小时执行一次 (在 0 分, 每 6 小时)
  schedule:
    - cron: '0 */6 * * *'

jobs:
  update:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pyyaml tqdm PySocks

      # 实现真实延迟测试
      # - name: Download and setup Xray-core
      #   run: |
      #     # 从 GitHub Releases 下载最新的 Xray-core for Linux 64-bit
      #     wget -O xray.zip https://github.com/XTLS/Xray-core/releases/latest/download/Xray-linux-64.zip
      #     # 解压出 xray 可执行文件
      #     unzip -o xray.zip xray
      #     # 赋予可执行权限
      #     chmod +x xray
      #     # 清理压缩包
      #     rm xray.zip
      - name: 下载 mihomo (Clash.Meta) 核心
        run: |
          # 1. 自动获取最新的版本号
          LATEST_TAG=$(curl -sL "https://api.github.com/repos/MetaCubeX/mihomo/releases/latest" | jq -r ".tag_name")
          
          if [ -z "$LATEST_TAG" ]; then
            echo "错误：无法获取最新的 mihomo 版本号！"
            exit 1
          fi
          
          echo "最新的 mihomo 版本是: $LATEST_TAG"
          
          # 2. 构建下载链接 (GitHub Actions 使用 linux-amd64 架构)
          DOWNLOAD_URL="https://github.com/MetaCubeX/mihomo/releases/download/${LATEST_TAG}/mihomo-linux-amd64-${LATEST_TAG}.gz"
          
          echo "正在从 ${DOWNLOAD_URL} 下载 mihomo 核心..."
          wget -q -O mihomo.gz "${DOWNLOAD_URL}"
          
          # 3. 解压核心文件
          echo "解压核心文件..."
          gzip -d mihomo.gz
          
          # 4. 将解压出的核心文件重命名为 'clash'，并赋予执行权限
          # Python 脚本将通过 './clash' 调用它
          mv mihomo clash
          chmod +x clash
          
          echo "mihomo 核心准备就绪:"
          ./clash -v

      - name: Run subscription update script
        run: python update_subs.py

      # 提交并推送更改
      - name: Commit and push changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add -A
          git diff-index --quiet HEAD || git commit -m "feat: 自动更新订阅文件" -m "更新时间: $(date -u)" -m "[skip ci]"
          git push
